---
interface Props {
  currentPage?: string // Current page
  lang?: string // Language parameter
  jsonType?: string // Type of the page
  extraJson?: Record<string, any> // Extra JSON data
}
const { currentPage, lang, jsonType, extraJson } = Astro.props as Props

// Libs
import { useTranslations } from '../../../i18n/utils'

// i18n
const t = useTranslations((lang as 'en' | 'es') || 'en')

// Data
import { domain } from '../../../data/setup'
import {
  email,
  socialNetworks,
} from '../../../data/contact'
import { googleMapsLink } from '../../../data/contact'

// Get page metadata from i18n
const title = 'Ella Skin & Spa Wellness'
const pageName = t(`meta.${currentPage}.page`)
const description = t(`meta.${currentPage}.description`)
const image = '/imgs/logo.webp'
const type = 'website'
const twitterHandle = '@DeveloperDari'
let keywords = t(`meta.${currentPage}.keywords`)
if (typeof keywords === 'string') {
  keywords = keywords.split(',').map((keyword) => keyword.trim())
}

// Split keywords into an array if it's a string
const keywordsContent = Array.isArray(keywords) ? keywords.join(', ') : keywords

// Calculate page title
let pageTitle
if (currentPage == 'home') {
  pageTitle = pageName
} else {
  pageTitle = `${pageName} | ${title}`
}

// Page slug â€” we assume `currentPage` is the slug, e.g., 'gallery'
const pageSlug = currentPage === 'home' ? '' : `/${currentPage}`

// Canonical URL for this language
const canonicalUrl = `${domain}/${lang}${pageSlug}`

// Alternate URLs
const alternateUrls = {
  en: `${domain}/en${pageSlug}`,
  es: `${domain}/es${pageSlug}`,
}

// Generate data
const jsonLd = {
  '@context': 'https://schema.org',
  '@type': jsonType || 'LocalBusiness',
  '@id': `${domain}#localbusiness`,
  name: pageTitle,
  description: description,
  url: canonicalUrl,
  logo: `${domain}/imgs/logo.webp`,
  image: `${domain}/imgs/logo.webp`,
  email: email,
  serviceArea: ['Yucatan', 'Mexico'],
  hasMap: googleMapsLink,
  sameAs: [...socialNetworks.map((social) => social.link)],
  areaServed: [
    { '@type': 'AdministrativeArea', name: 'Yucatan' },
    { '@type': 'Country', name: 'Mexico' },
  ],
  inLanguage: lang || 'en',
  ...extraJson,
}

const ogTypeMap = {
  LocalBusiness: 'website',
  Blog: 'blog',
  BlogPosting: 'article',
}
const ogType = ogTypeMap[jsonType as keyof typeof ogTypeMap] || 'website'
---

<!-- Html tags -->
<title>{pageTitle}</title>
<meta
  name='description'
  content={description}
/>
{
  keywordsContent && (
    <meta
      name='keywords'
      content={keywordsContent}
    />
  )
}
<meta
  name='author'
  content="Dari Dev's Team"
/>

<!-- Open Graph tags -->
<meta
  property='og:type'
  content={ogType}
/>
<meta
  property='og:title'
  content={pageTitle}
/>
<meta
  property='og:description'
  content={description}
/>
<meta
  property='og:url'
  content={canonicalUrl}
/>
<meta
  property='og:image'
  content={image}
/>

<!-- Twitter tags -->
<meta
  name='twitter:card'
  content='summary_large_image'
/>
<meta
  name='twitter:site'
  content={twitterHandle}
/>
<meta
  name='twitter:title'
  content={pageTitle}
/>
<meta
  name='twitter:description'
  content={description}
/>
<meta
  name='twitter:image'
  content={image}
/>
<meta
  name='twitter:creator'
  content='@DeveloperDari'
/>

<!-- Json Ld -->
<script
  type='application/ld+json'
  set:html={JSON.stringify(jsonLd)}
/>

<!-- Sitemap -->
<link
  rel='sitemap'
  href='/sitemap-index.xml'
/>

<!-- Lang -->
<link
  rel='canonical'
  href={canonicalUrl}
/>
<link
  rel='alternate'
  hreflang='en'
  href={alternateUrls.en}
/>
<link
  rel='alternate'
  hreflang='es'
  href={alternateUrls.es}
/>
